SOUTH = 1
WEST = 2
NORTH = 3
EAST = 4

HEADING = {"south","west","north","east"}
-- Returns the modem side if present, otherwise nil
function getModem()
  local peripherals = peripheral.getNames()
  for key, side in pairs(peripherals) do
    if peripheral.getType(side) == "modem" then
      return side
    end
  end
  error("No modem attached")
  return nil
end

-- Attempts to determine the turtle's heading by moving in one direction and querrying the GPS
-- Requires a modem and external GPS setup
function getHeading()
  if not getModem() then
    return nil
  end
  
  local turnCount = 0
  local gpsLoc = {gps.locate()}
  if not gpsLoc then
    return nil
  end
  local originalPos = vector.new(gps.locate())
  while not turtle.forward() do
    if turnCount >= 4 then
      error("Turtle is unable to move in any of the lateral directions")
      return nil
    end
    turnCount = turnCount + 1
    turtle.turnRight()
  end
  
  local heading = 0
  gpsLoc = {gps.locate()}
  if not gpsLoc then
    return nil
  end
  
  local newPos = vector.new(gps.locate())
  local diff = newPos - originalPos
  if diff.x == -1 then heading = WEST
  elseif diff.x == 1 then heading = EAST
  elseif diff.z == 1 then heading = SOUTH
  elseif diff.z == -1 then heading = NORTH end
  turtle.back()
  heading = (heading + 3 - turnCount) % 4 + 1
  if i < 3 then
    for i=1,turnCount,1 do
	  turtle.turnLeft()
    end
  else
	turtle.turnRight()
  end
  return HEADING[heading], heading
end

-- Determines if element is in array
function contains(array, element)
  for _,e in pairs(array) do
        if e == element then
      return true, _ 
    end
  end
  return false
end

-- Attempts to face the turtle in the specified direction
-- Directions: "north", "east", "south", "west"
-- Requires a modem and external GPS setup
function face(direction)
  exists, newHeading = contains(HEADING, direction)
  if not exists then
    error("Not a valid heading")
    return false
  end
  
  headingName, heading = getHeading()
  if not heading then return false end
 
  local turns = (heading - newHeading + 4) % 4
  
  if turns == 1 then
    turtle.turnLeft()
  elseif turns == 2 then
    turtle.turnRight()
    turtle.turnRight()
  elseif turns == 3 then
    turtle.turnRight()
  end
         
  return true
end

-- An element-by-element vector equality test
function vectorsEqual(v1,v2)
  return v1.x == v2.x and
    v1.y == v2.y and
    v1.z == v2.z
end

-- Attempts to determine the turtle's displacement from a target location
-- Requires a modem and external GPS setup
function displacement(targetGps)
  if not getModem() then return nil end
  if not gps.locate() then return nil end
  
  local currentGps = vector.new(gps.locate())
  return targetGps - currentGps
  
end

function goto(x,y,z)
  if not getModem() then
    return false
  end
  
  local target = vector.new(x,y,z)
  local i
  local dx, dy, dz
  dx = x/math.abs(x)
  dy = y/math.abs(y)
  dz = z/math.abs(z)
  
  
  
  
  while true do
    local diff =  displacement(target)
    if not diff then
      error("Lost GPS signal")
      return false
    end
    
    print("Target is (",diff.x,",",diff.y,",",diff.z,") away")
   
   
    if diff.z > 0 then
      face("south")
      while displacement(target).z > 0 do
        turtle.forward()
      end
    elseif diff.z < 0 then
      face("north")
      while displacement(target).z < 0 do
        turtle.forward()
      end
    elseif diff.x > 0 then
      face("east")
      while displacement(target).x > 0 do
        turtle.forward()
      end
    elseif diff.x < 0 then
      face("west")
      while displacement(target).x < 0 do
        turtle.forward()
      end
    
    elseif diff.y > 0 then
      while displacement(target).y > 0 do
        turtle.up()      
      end
    elseif diff.y < 0 then
      while displacement(target).y < 0 do
        turtle.down()
      end
    else
      break
    end  
  end       

  return true
end

-- Selects the first slot containing the given item name. Returns true if successful.
function get(name)
  local currSlot = turtle.getSelectedSlot()
  local i = 0
  for i=1,16,1 do
    turtle.select(currSlot)
    if turtle.getItemCount() > 0 then
      item = turtle.getItemDetail()
      if item.name == name then
        return true
      end
    end
    currSlot = (currSlot % 16) + 1
  end
  return false
end

-- Determines whether or not there is a block with the specified name below the turtle
-- Example: isBelow("minecraft:chest")
function isBelow(name)
  exists, object = turtle.inspectDown()
  if not exists then
    return false
  elseif object.name ~= name then
    return false
  end
  return true
end


